from ninja import NinjaAPI
from ninja.responses import codes_2xx
import asyncio 
import pydantic
from pydantic import EmailStr
from asgiref.sync import sync_to_async
from .formfit import creatWorkouts
from .schema import WorkoutSchema , ErrorSchema, NotFoundSchema
from django.shortcuts import get_object_or_404
from authentication.models import Person
from django.core.exceptions import ValidationError
from ninja.errors import ValidationError as NinjaValidationError
from .models import Workout

api = NinjaAPI()

# @api.exception_handler(ValidationError)
# async def validation_error_exception_handler(request):
#     pass

@api.get("/excersise/workout/{workout_id}", response={200: WorkoutSchema, 404: NotFoundSchema})
async def getWorkouts(self, request, workout_id: int):
    try:
        workout = Workout.object.get(pk=workout_id)
        return 200, workout
    except:
        message = 'workout with that id not found'
        return 404, message

# Need endpoint to create workouts
@api.api_operation(["GET","POST"], "excersise/create_workouts/{person_id}", response={codes_2xx: WorkoutSchema, 500: ErrorSchema})
async def makeWorkouts(request, person_id: int):
    person = Person.objects.filter(pk=person_id)
    person_obj = await sync_to_async(get_object_or_404)(Person, pk=person_id)
    goal = person_obj.fitnessgoal
    recommendations = creatWorkouts(goal)
    # print(recommendations)
    for target_recommendation in recommendations:
        for target in target_recommendation:
            try:
                print(target)
                print(target_recommendation[target])
                bodyPart = target_recommendation[target]['bodyPart']
                equipment = target_recommendation[target]['equipment']
                instructions = target_recommendation[target]['instructions']
                if instructions is str:
                    instructions = instructions
                else:
                    instructions = ("had trouble retrieving instructions")
                target_area = target_recommendation[target]['target']
                new_workout = await sync_to_async(Workout.objects.create)(person=person_obj,workout=target,equipment=equipment,instructions=instructions, targetArea=target_area, bodypart=bodyPart)
            except NinjaValidationError as e:
                pass
            except ValidationError as e:
                pass
            except ValidationError as e:
                pass
                
            except ConfigError as e:
                pass
                

            except pydantic.ValidationError as e:
                pass
            
    return 201, new_workout





#Need endpoint display all workouts per user generated by the script




    
    